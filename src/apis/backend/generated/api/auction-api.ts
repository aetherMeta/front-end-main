/* tslint:disable */
/* eslint-disable */
/**
 * Aether Backend
 * The following is a list of endpoints for Aether Backend, plus their respective request and response data transfer objects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreatePrimaryAuctionDto } from '../models';
// @ts-ignore
import { CreatePrimaryBidDto } from '../models';
// @ts-ignore
import { CreateSecondaryAuctionDto } from '../models';
// @ts-ignore
import { CreateSecondaryBidDto } from '../models';
// @ts-ignore
import { PrimaryAuctionResponse } from '../models';
// @ts-ignore
import { PrimaryBidResponse } from '../models';
// @ts-ignore
import { SecondaryAuctionResponse } from '../models';
// @ts-ignore
import { SecondaryBidResponse } from '../models';
// @ts-ignore
import { UpdateAuctionDto } from '../models';
/**
 * AuctionApi - axios parameter creator
 * @export
 */
export const AuctionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} auctionId 
         * @param {CreatePrimaryBidDto} createPrimaryBidDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        primaryAuctionControllerBid: async (auctionId: string, createPrimaryBidDto: CreatePrimaryBidDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'auctionId' is not null or undefined
            assertParamExists('primaryAuctionControllerBid', 'auctionId', auctionId)
            // verify required parameter 'createPrimaryBidDto' is not null or undefined
            assertParamExists('primaryAuctionControllerBid', 'createPrimaryBidDto', createPrimaryBidDto)
            const localVarPath = `/auctions/primary/{auctionId}/bid`
                .replace(`{${"auctionId"}}`, encodeURIComponent(String(auctionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPrimaryBidDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreatePrimaryAuctionDto} createPrimaryAuctionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        primaryAuctionControllerCreate: async (createPrimaryAuctionDto: CreatePrimaryAuctionDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPrimaryAuctionDto' is not null or undefined
            assertParamExists('primaryAuctionControllerCreate', 'createPrimaryAuctionDto', createPrimaryAuctionDto)
            const localVarPath = `/auctions/primary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPrimaryAuctionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        primaryAuctionControllerFindAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auctions/primary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} auctionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        primaryAuctionControllerFindBids: async (auctionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'auctionId' is not null or undefined
            assertParamExists('primaryAuctionControllerFindBids', 'auctionId', auctionId)
            const localVarPath = `/auctions/primary/{auctionId}/bids`
                .replace(`{${"auctionId"}}`, encodeURIComponent(String(auctionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        primaryAuctionControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('primaryAuctionControllerFindOne', 'id', id)
            const localVarPath = `/auctions/primary/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateAuctionDto} updateAuctionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        primaryAuctionControllerUpdate: async (id: string, updateAuctionDto: UpdateAuctionDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('primaryAuctionControllerUpdate', 'id', id)
            // verify required parameter 'updateAuctionDto' is not null or undefined
            assertParamExists('primaryAuctionControllerUpdate', 'updateAuctionDto', updateAuctionDto)
            const localVarPath = `/auctions/primary/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateAuctionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} auctionId 
         * @param {CreateSecondaryBidDto} createSecondaryBidDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secondaryAuctionControllerBid: async (auctionId: string, createSecondaryBidDto: CreateSecondaryBidDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'auctionId' is not null or undefined
            assertParamExists('secondaryAuctionControllerBid', 'auctionId', auctionId)
            // verify required parameter 'createSecondaryBidDto' is not null or undefined
            assertParamExists('secondaryAuctionControllerBid', 'createSecondaryBidDto', createSecondaryBidDto)
            const localVarPath = `/auctions/secondary/{auctionId}/bid`
                .replace(`{${"auctionId"}}`, encodeURIComponent(String(auctionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSecondaryBidDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateSecondaryAuctionDto} createSecondaryAuctionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secondaryAuctionControllerCreate: async (createSecondaryAuctionDto: CreateSecondaryAuctionDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createSecondaryAuctionDto' is not null or undefined
            assertParamExists('secondaryAuctionControllerCreate', 'createSecondaryAuctionDto', createSecondaryAuctionDto)
            const localVarPath = `/auctions/secondary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSecondaryAuctionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secondaryAuctionControllerFindAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auctions/secondary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} auctionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secondaryAuctionControllerFindBids: async (auctionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'auctionId' is not null or undefined
            assertParamExists('secondaryAuctionControllerFindBids', 'auctionId', auctionId)
            const localVarPath = `/auctions/secondary/{auctionId}/bids`
                .replace(`{${"auctionId"}}`, encodeURIComponent(String(auctionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secondaryAuctionControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('secondaryAuctionControllerFindOne', 'id', id)
            const localVarPath = `/auctions/secondary/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateAuctionDto} updateAuctionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secondaryAuctionControllerUpdate: async (id: string, updateAuctionDto: UpdateAuctionDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('secondaryAuctionControllerUpdate', 'id', id)
            // verify required parameter 'updateAuctionDto' is not null or undefined
            assertParamExists('secondaryAuctionControllerUpdate', 'updateAuctionDto', updateAuctionDto)
            const localVarPath = `/auctions/secondary/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateAuctionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuctionApi - functional programming interface
 * @export
 */
export const AuctionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuctionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} auctionId 
         * @param {CreatePrimaryBidDto} createPrimaryBidDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async primaryAuctionControllerBid(auctionId: string, createPrimaryBidDto: CreatePrimaryBidDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrimaryBidResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.primaryAuctionControllerBid(auctionId, createPrimaryBidDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreatePrimaryAuctionDto} createPrimaryAuctionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async primaryAuctionControllerCreate(createPrimaryAuctionDto: CreatePrimaryAuctionDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrimaryAuctionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.primaryAuctionControllerCreate(createPrimaryAuctionDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async primaryAuctionControllerFindAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PrimaryAuctionResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.primaryAuctionControllerFindAll(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} auctionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async primaryAuctionControllerFindBids(auctionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PrimaryBidResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.primaryAuctionControllerFindBids(auctionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async primaryAuctionControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrimaryAuctionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.primaryAuctionControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateAuctionDto} updateAuctionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async primaryAuctionControllerUpdate(id: string, updateAuctionDto: UpdateAuctionDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrimaryAuctionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.primaryAuctionControllerUpdate(id, updateAuctionDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} auctionId 
         * @param {CreateSecondaryBidDto} createSecondaryBidDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondaryAuctionControllerBid(auctionId: string, createSecondaryBidDto: CreateSecondaryBidDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SecondaryBidResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.secondaryAuctionControllerBid(auctionId, createSecondaryBidDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateSecondaryAuctionDto} createSecondaryAuctionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondaryAuctionControllerCreate(createSecondaryAuctionDto: CreateSecondaryAuctionDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SecondaryAuctionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.secondaryAuctionControllerCreate(createSecondaryAuctionDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondaryAuctionControllerFindAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SecondaryAuctionResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.secondaryAuctionControllerFindAll(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} auctionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondaryAuctionControllerFindBids(auctionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SecondaryBidResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.secondaryAuctionControllerFindBids(auctionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondaryAuctionControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SecondaryAuctionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.secondaryAuctionControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateAuctionDto} updateAuctionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondaryAuctionControllerUpdate(id: string, updateAuctionDto: UpdateAuctionDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SecondaryAuctionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.secondaryAuctionControllerUpdate(id, updateAuctionDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuctionApi - factory interface
 * @export
 */
export const AuctionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuctionApiFp(configuration)
    return {
        /**
         * 
         * @param {string} auctionId 
         * @param {CreatePrimaryBidDto} createPrimaryBidDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        primaryAuctionControllerBid(auctionId: string, createPrimaryBidDto: CreatePrimaryBidDto, options?: any): AxiosPromise<PrimaryBidResponse> {
            return localVarFp.primaryAuctionControllerBid(auctionId, createPrimaryBidDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreatePrimaryAuctionDto} createPrimaryAuctionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        primaryAuctionControllerCreate(createPrimaryAuctionDto: CreatePrimaryAuctionDto, options?: any): AxiosPromise<PrimaryAuctionResponse> {
            return localVarFp.primaryAuctionControllerCreate(createPrimaryAuctionDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        primaryAuctionControllerFindAll(options?: any): AxiosPromise<Array<PrimaryAuctionResponse>> {
            return localVarFp.primaryAuctionControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} auctionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        primaryAuctionControllerFindBids(auctionId: string, options?: any): AxiosPromise<Array<PrimaryBidResponse>> {
            return localVarFp.primaryAuctionControllerFindBids(auctionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        primaryAuctionControllerFindOne(id: string, options?: any): AxiosPromise<PrimaryAuctionResponse> {
            return localVarFp.primaryAuctionControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateAuctionDto} updateAuctionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        primaryAuctionControllerUpdate(id: string, updateAuctionDto: UpdateAuctionDto, options?: any): AxiosPromise<PrimaryAuctionResponse> {
            return localVarFp.primaryAuctionControllerUpdate(id, updateAuctionDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} auctionId 
         * @param {CreateSecondaryBidDto} createSecondaryBidDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secondaryAuctionControllerBid(auctionId: string, createSecondaryBidDto: CreateSecondaryBidDto, options?: any): AxiosPromise<SecondaryBidResponse> {
            return localVarFp.secondaryAuctionControllerBid(auctionId, createSecondaryBidDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateSecondaryAuctionDto} createSecondaryAuctionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secondaryAuctionControllerCreate(createSecondaryAuctionDto: CreateSecondaryAuctionDto, options?: any): AxiosPromise<SecondaryAuctionResponse> {
            return localVarFp.secondaryAuctionControllerCreate(createSecondaryAuctionDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secondaryAuctionControllerFindAll(options?: any): AxiosPromise<Array<SecondaryAuctionResponse>> {
            return localVarFp.secondaryAuctionControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} auctionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secondaryAuctionControllerFindBids(auctionId: string, options?: any): AxiosPromise<Array<SecondaryBidResponse>> {
            return localVarFp.secondaryAuctionControllerFindBids(auctionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secondaryAuctionControllerFindOne(id: string, options?: any): AxiosPromise<SecondaryAuctionResponse> {
            return localVarFp.secondaryAuctionControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateAuctionDto} updateAuctionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secondaryAuctionControllerUpdate(id: string, updateAuctionDto: UpdateAuctionDto, options?: any): AxiosPromise<SecondaryAuctionResponse> {
            return localVarFp.secondaryAuctionControllerUpdate(id, updateAuctionDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuctionApi - object-oriented interface
 * @export
 * @class AuctionApi
 * @extends {BaseAPI}
 */
export class AuctionApi extends BaseAPI {
    /**
     * 
     * @param {string} auctionId 
     * @param {CreatePrimaryBidDto} createPrimaryBidDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuctionApi
     */
    public primaryAuctionControllerBid(auctionId: string, createPrimaryBidDto: CreatePrimaryBidDto, options?: AxiosRequestConfig) {
        return AuctionApiFp(this.configuration).primaryAuctionControllerBid(auctionId, createPrimaryBidDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreatePrimaryAuctionDto} createPrimaryAuctionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuctionApi
     */
    public primaryAuctionControllerCreate(createPrimaryAuctionDto: CreatePrimaryAuctionDto, options?: AxiosRequestConfig) {
        return AuctionApiFp(this.configuration).primaryAuctionControllerCreate(createPrimaryAuctionDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuctionApi
     */
    public primaryAuctionControllerFindAll(options?: AxiosRequestConfig) {
        return AuctionApiFp(this.configuration).primaryAuctionControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} auctionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuctionApi
     */
    public primaryAuctionControllerFindBids(auctionId: string, options?: AxiosRequestConfig) {
        return AuctionApiFp(this.configuration).primaryAuctionControllerFindBids(auctionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuctionApi
     */
    public primaryAuctionControllerFindOne(id: string, options?: AxiosRequestConfig) {
        return AuctionApiFp(this.configuration).primaryAuctionControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateAuctionDto} updateAuctionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuctionApi
     */
    public primaryAuctionControllerUpdate(id: string, updateAuctionDto: UpdateAuctionDto, options?: AxiosRequestConfig) {
        return AuctionApiFp(this.configuration).primaryAuctionControllerUpdate(id, updateAuctionDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} auctionId 
     * @param {CreateSecondaryBidDto} createSecondaryBidDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuctionApi
     */
    public secondaryAuctionControllerBid(auctionId: string, createSecondaryBidDto: CreateSecondaryBidDto, options?: AxiosRequestConfig) {
        return AuctionApiFp(this.configuration).secondaryAuctionControllerBid(auctionId, createSecondaryBidDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateSecondaryAuctionDto} createSecondaryAuctionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuctionApi
     */
    public secondaryAuctionControllerCreate(createSecondaryAuctionDto: CreateSecondaryAuctionDto, options?: AxiosRequestConfig) {
        return AuctionApiFp(this.configuration).secondaryAuctionControllerCreate(createSecondaryAuctionDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuctionApi
     */
    public secondaryAuctionControllerFindAll(options?: AxiosRequestConfig) {
        return AuctionApiFp(this.configuration).secondaryAuctionControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} auctionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuctionApi
     */
    public secondaryAuctionControllerFindBids(auctionId: string, options?: AxiosRequestConfig) {
        return AuctionApiFp(this.configuration).secondaryAuctionControllerFindBids(auctionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuctionApi
     */
    public secondaryAuctionControllerFindOne(id: string, options?: AxiosRequestConfig) {
        return AuctionApiFp(this.configuration).secondaryAuctionControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateAuctionDto} updateAuctionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuctionApi
     */
    public secondaryAuctionControllerUpdate(id: string, updateAuctionDto: UpdateAuctionDto, options?: AxiosRequestConfig) {
        return AuctionApiFp(this.configuration).secondaryAuctionControllerUpdate(id, updateAuctionDto, options).then((request) => request(this.axios, this.basePath));
    }
}
