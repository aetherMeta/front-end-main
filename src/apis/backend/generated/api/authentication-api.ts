/* tslint:disable */
/* eslint-disable */
/**
 * Aether Backend
 * The following is a list of endpoints for Aether Backend, plus their respective request and response data transfer objects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ChallengeRequestBodyDto } from '../models';
// @ts-ignore
import { ChallengeResponseDto } from '../models';
// @ts-ignore
import { FreeJwtDto } from '../models';
// @ts-ignore
import { VerifyBodyDto } from '../models';
// @ts-ignore
import { VerifyResponseDto } from '../models';
/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Verifies a challenge
         * @summary 
         * @param {ChallengeRequestBodyDto} challengeRequestBodyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerChallenge: async (challengeRequestBodyDto: ChallengeRequestBodyDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'challengeRequestBodyDto' is not null or undefined
            assertParamExists('authControllerChallenge', 'challengeRequestBodyDto', challengeRequestBodyDto)
            const localVarPath = `/auth/challenge`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(challengeRequestBodyDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * DEBUG: Generates a JWT of a user without authentication
         * @summary 
         * @param {FreeJwtDto} freeJwtDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerTest: async (freeJwtDto: FreeJwtDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'freeJwtDto' is not null or undefined
            assertParamExists('authControllerTest', 'freeJwtDto', freeJwtDto)
            const localVarPath = `/auth/free-jwt`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(freeJwtDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Verifies a challenge
         * @summary 
         * @param {VerifyBodyDto} verifyBodyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerVerify: async (verifyBodyDto: VerifyBodyDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'verifyBodyDto' is not null or undefined
            assertParamExists('authControllerVerify', 'verifyBodyDto', verifyBodyDto)
            const localVarPath = `/auth/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(verifyBodyDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * Verifies a challenge
         * @summary 
         * @param {ChallengeRequestBodyDto} challengeRequestBodyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerChallenge(challengeRequestBodyDto: ChallengeRequestBodyDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChallengeResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerChallenge(challengeRequestBodyDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * DEBUG: Generates a JWT of a user without authentication
         * @summary 
         * @param {FreeJwtDto} freeJwtDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerTest(freeJwtDto: FreeJwtDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerTest(freeJwtDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Verifies a challenge
         * @summary 
         * @param {VerifyBodyDto} verifyBodyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerVerify(verifyBodyDto: VerifyBodyDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerifyResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerVerify(verifyBodyDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * Verifies a challenge
         * @summary 
         * @param {ChallengeRequestBodyDto} challengeRequestBodyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerChallenge(challengeRequestBodyDto: ChallengeRequestBodyDto, options?: any): AxiosPromise<ChallengeResponseDto> {
            return localVarFp.authControllerChallenge(challengeRequestBodyDto, options).then((request) => request(axios, basePath));
        },
        /**
         * DEBUG: Generates a JWT of a user without authentication
         * @summary 
         * @param {FreeJwtDto} freeJwtDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerTest(freeJwtDto: FreeJwtDto, options?: any): AxiosPromise<void> {
            return localVarFp.authControllerTest(freeJwtDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Verifies a challenge
         * @summary 
         * @param {VerifyBodyDto} verifyBodyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerVerify(verifyBodyDto: VerifyBodyDto, options?: any): AxiosPromise<VerifyResponseDto> {
            return localVarFp.authControllerVerify(verifyBodyDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * Verifies a challenge
     * @summary 
     * @param {ChallengeRequestBodyDto} challengeRequestBodyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public authControllerChallenge(challengeRequestBodyDto: ChallengeRequestBodyDto, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).authControllerChallenge(challengeRequestBodyDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * DEBUG: Generates a JWT of a user without authentication
     * @summary 
     * @param {FreeJwtDto} freeJwtDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public authControllerTest(freeJwtDto: FreeJwtDto, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).authControllerTest(freeJwtDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Verifies a challenge
     * @summary 
     * @param {VerifyBodyDto} verifyBodyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public authControllerVerify(verifyBodyDto: VerifyBodyDto, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).authControllerVerify(verifyBodyDto, options).then((request) => request(this.axios, this.basePath));
    }
}
