/* tslint:disable */
/* eslint-disable */
/**
 * Aether Backend
 * The following is a list of endpoints for Aether Backend, plus their respective request and response data transfer objects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreatePrimarySaleDto } from '../models';
// @ts-ignore
import { CreateSecondarySaleDto } from '../models';
// @ts-ignore
import { FilterValue } from '../models';
// @ts-ignore
import { GetPrimarySaleResponse } from '../models';
// @ts-ignore
import { GetSecondarySaleQuery } from '../models';
// @ts-ignore
import { GetSecondarySaleResponse } from '../models';
// @ts-ignore
import { UpdateSaleDto } from '../models';
/**
 * SalesApi - axios parameter creator
 * @export
 */
export const SalesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreatePrimarySaleDto} createPrimarySaleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        primarySaleControllerCreate: async (createPrimarySaleDto: CreatePrimarySaleDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPrimarySaleDto' is not null or undefined
            assertParamExists('primarySaleControllerCreate', 'createPrimarySaleDto', createPrimarySaleDto)
            const localVarPath = `/sales/primary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPrimarySaleDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [cursor] 
         * @param {number} [skip] 
         * @param {FilterValue} [createdAt] 
         * @param {FilterValue} [updatedAt] 
         * @param {FilterValue} [name] 
         * @param {FilterValue} [price] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        primarySaleControllerFindAll: async (cursor?: string, skip?: number, createdAt?: FilterValue, updatedAt?: FilterValue, name?: FilterValue, price?: FilterValue, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sales/primary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (createdAt !== undefined) {
                localVarQueryParameter['createdAt'] = createdAt;
            }

            if (updatedAt !== undefined) {
                localVarQueryParameter['updatedAt'] = updatedAt;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (price !== undefined) {
                localVarQueryParameter['price'] = price;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        primarySaleControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('primarySaleControllerFindOne', 'id', id)
            const localVarPath = `/sales/primary/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateSaleDto} updateSaleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        primarySaleControllerUpdate: async (id: string, updateSaleDto: UpdateSaleDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('primarySaleControllerUpdate', 'id', id)
            // verify required parameter 'updateSaleDto' is not null or undefined
            assertParamExists('primarySaleControllerUpdate', 'updateSaleDto', updateSaleDto)
            const localVarPath = `/sales/primary/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateSaleDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateSecondarySaleDto} createSecondarySaleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secondarySaleControllerCreate: async (createSecondarySaleDto: CreateSecondarySaleDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createSecondarySaleDto' is not null or undefined
            assertParamExists('secondarySaleControllerCreate', 'createSecondarySaleDto', createSecondarySaleDto)
            const localVarPath = `/sales/secondary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSecondarySaleDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [cursor] 
         * @param {number} [skip] 
         * @param {FilterValue} [createdAt] 
         * @param {FilterValue} [updatedAt] 
         * @param {FilterValue} [name] 
         * @param {FilterValue} [price] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secondarySaleControllerFindAll: async (cursor?: string, skip?: number, createdAt?: FilterValue, updatedAt?: FilterValue, name?: FilterValue, price?: FilterValue, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sales/secondary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (createdAt !== undefined) {
                localVarQueryParameter['createdAt'] = createdAt;
            }

            if (updatedAt !== undefined) {
                localVarQueryParameter['updatedAt'] = updatedAt;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (price !== undefined) {
                localVarQueryParameter['price'] = price;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secondarySaleControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('secondarySaleControllerFindOne', 'id', id)
            const localVarPath = `/sales/secondary/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateSaleDto} updateSaleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secondarySaleControllerUpdate: async (id: string, updateSaleDto: UpdateSaleDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('secondarySaleControllerUpdate', 'id', id)
            // verify required parameter 'updateSaleDto' is not null or undefined
            assertParamExists('secondarySaleControllerUpdate', 'updateSaleDto', updateSaleDto)
            const localVarPath = `/sales/secondary/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateSaleDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SalesApi - functional programming interface
 * @export
 */
export const SalesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SalesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreatePrimarySaleDto} createPrimarySaleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async primarySaleControllerCreate(createPrimarySaleDto: CreatePrimarySaleDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPrimarySaleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.primarySaleControllerCreate(createPrimarySaleDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [cursor] 
         * @param {number} [skip] 
         * @param {FilterValue} [createdAt] 
         * @param {FilterValue} [updatedAt] 
         * @param {FilterValue} [name] 
         * @param {FilterValue} [price] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async primarySaleControllerFindAll(cursor?: string, skip?: number, createdAt?: FilterValue, updatedAt?: FilterValue, name?: FilterValue, price?: FilterValue, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetPrimarySaleResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.primarySaleControllerFindAll(cursor, skip, createdAt, updatedAt, name, price, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async primarySaleControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPrimarySaleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.primarySaleControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateSaleDto} updateSaleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async primarySaleControllerUpdate(id: string, updateSaleDto: UpdateSaleDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPrimarySaleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.primarySaleControllerUpdate(id, updateSaleDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateSecondarySaleDto} createSecondarySaleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondarySaleControllerCreate(createSecondarySaleDto: CreateSecondarySaleDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSecondarySaleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.secondarySaleControllerCreate(createSecondarySaleDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [cursor] 
         * @param {number} [skip] 
         * @param {FilterValue} [createdAt] 
         * @param {FilterValue} [updatedAt] 
         * @param {FilterValue} [name] 
         * @param {FilterValue} [price] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondarySaleControllerFindAll(cursor?: string, skip?: number, createdAt?: FilterValue, updatedAt?: FilterValue, name?: FilterValue, price?: FilterValue, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetSecondarySaleResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.secondarySaleControllerFindAll(cursor, skip, createdAt, updatedAt, name, price, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondarySaleControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSecondarySaleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.secondarySaleControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateSaleDto} updateSaleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async secondarySaleControllerUpdate(id: string, updateSaleDto: UpdateSaleDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSecondarySaleQuery>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.secondarySaleControllerUpdate(id, updateSaleDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SalesApi - factory interface
 * @export
 */
export const SalesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SalesApiFp(configuration)
    return {
        /**
         * 
         * @param {CreatePrimarySaleDto} createPrimarySaleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        primarySaleControllerCreate(createPrimarySaleDto: CreatePrimarySaleDto, options?: any): AxiosPromise<GetPrimarySaleResponse> {
            return localVarFp.primarySaleControllerCreate(createPrimarySaleDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [cursor] 
         * @param {number} [skip] 
         * @param {FilterValue} [createdAt] 
         * @param {FilterValue} [updatedAt] 
         * @param {FilterValue} [name] 
         * @param {FilterValue} [price] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        primarySaleControllerFindAll(cursor?: string, skip?: number, createdAt?: FilterValue, updatedAt?: FilterValue, name?: FilterValue, price?: FilterValue, options?: any): AxiosPromise<Array<GetPrimarySaleResponse>> {
            return localVarFp.primarySaleControllerFindAll(cursor, skip, createdAt, updatedAt, name, price, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        primarySaleControllerFindOne(id: string, options?: any): AxiosPromise<GetPrimarySaleResponse> {
            return localVarFp.primarySaleControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateSaleDto} updateSaleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        primarySaleControllerUpdate(id: string, updateSaleDto: UpdateSaleDto, options?: any): AxiosPromise<GetPrimarySaleResponse> {
            return localVarFp.primarySaleControllerUpdate(id, updateSaleDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateSecondarySaleDto} createSecondarySaleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secondarySaleControllerCreate(createSecondarySaleDto: CreateSecondarySaleDto, options?: any): AxiosPromise<GetSecondarySaleResponse> {
            return localVarFp.secondarySaleControllerCreate(createSecondarySaleDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [cursor] 
         * @param {number} [skip] 
         * @param {FilterValue} [createdAt] 
         * @param {FilterValue} [updatedAt] 
         * @param {FilterValue} [name] 
         * @param {FilterValue} [price] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secondarySaleControllerFindAll(cursor?: string, skip?: number, createdAt?: FilterValue, updatedAt?: FilterValue, name?: FilterValue, price?: FilterValue, options?: any): AxiosPromise<Array<GetSecondarySaleResponse>> {
            return localVarFp.secondarySaleControllerFindAll(cursor, skip, createdAt, updatedAt, name, price, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secondarySaleControllerFindOne(id: string, options?: any): AxiosPromise<GetSecondarySaleResponse> {
            return localVarFp.secondarySaleControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateSaleDto} updateSaleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secondarySaleControllerUpdate(id: string, updateSaleDto: UpdateSaleDto, options?: any): AxiosPromise<GetSecondarySaleQuery> {
            return localVarFp.secondarySaleControllerUpdate(id, updateSaleDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SalesApi - object-oriented interface
 * @export
 * @class SalesApi
 * @extends {BaseAPI}
 */
export class SalesApi extends BaseAPI {
    /**
     * 
     * @param {CreatePrimarySaleDto} createPrimarySaleDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public primarySaleControllerCreate(createPrimarySaleDto: CreatePrimarySaleDto, options?: AxiosRequestConfig) {
        return SalesApiFp(this.configuration).primarySaleControllerCreate(createPrimarySaleDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [cursor] 
     * @param {number} [skip] 
     * @param {FilterValue} [createdAt] 
     * @param {FilterValue} [updatedAt] 
     * @param {FilterValue} [name] 
     * @param {FilterValue} [price] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public primarySaleControllerFindAll(cursor?: string, skip?: number, createdAt?: FilterValue, updatedAt?: FilterValue, name?: FilterValue, price?: FilterValue, options?: AxiosRequestConfig) {
        return SalesApiFp(this.configuration).primarySaleControllerFindAll(cursor, skip, createdAt, updatedAt, name, price, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public primarySaleControllerFindOne(id: string, options?: AxiosRequestConfig) {
        return SalesApiFp(this.configuration).primarySaleControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateSaleDto} updateSaleDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public primarySaleControllerUpdate(id: string, updateSaleDto: UpdateSaleDto, options?: AxiosRequestConfig) {
        return SalesApiFp(this.configuration).primarySaleControllerUpdate(id, updateSaleDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateSecondarySaleDto} createSecondarySaleDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public secondarySaleControllerCreate(createSecondarySaleDto: CreateSecondarySaleDto, options?: AxiosRequestConfig) {
        return SalesApiFp(this.configuration).secondarySaleControllerCreate(createSecondarySaleDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [cursor] 
     * @param {number} [skip] 
     * @param {FilterValue} [createdAt] 
     * @param {FilterValue} [updatedAt] 
     * @param {FilterValue} [name] 
     * @param {FilterValue} [price] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public secondarySaleControllerFindAll(cursor?: string, skip?: number, createdAt?: FilterValue, updatedAt?: FilterValue, name?: FilterValue, price?: FilterValue, options?: AxiosRequestConfig) {
        return SalesApiFp(this.configuration).secondarySaleControllerFindAll(cursor, skip, createdAt, updatedAt, name, price, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public secondarySaleControllerFindOne(id: string, options?: AxiosRequestConfig) {
        return SalesApiFp(this.configuration).secondarySaleControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateSaleDto} updateSaleDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public secondarySaleControllerUpdate(id: string, updateSaleDto: UpdateSaleDto, options?: AxiosRequestConfig) {
        return SalesApiFp(this.configuration).secondarySaleControllerUpdate(id, updateSaleDto, options).then((request) => request(this.axios, this.basePath));
    }
}
