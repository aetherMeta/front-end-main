/* tslint:disable */
/* eslint-disable */
/**
 * Aether Backend
 * The following is a list of endpoints for Aether Backend, plus their respective request and response data transfer objects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { NFTResponse } from '../models';
// @ts-ignore
import { PatchNFTRequestBodyDto } from '../models';
// @ts-ignore
import { PostNFTRequestBodyDto } from '../models';
// @ts-ignore
import { UserNFTResponse } from '../models';
/**
 * NFTsApi - axios parameter creator
 * @export
 */
export const NFTsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {PostNFTRequestBodyDto} postNFTRequestBodyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nftsControllerCreate: async (postNFTRequestBodyDto: PostNFTRequestBodyDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postNFTRequestBodyDto' is not null or undefined
            assertParamExists('nftsControllerCreate', 'postNFTRequestBodyDto', postNFTRequestBodyDto)
            const localVarPath = `/nfts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postNFTRequestBodyDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} chainId 
         * @param {string} address 
         * @param {number} tokenId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nftsControllerFindOne: async (chainId: number, address: string, tokenId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chainId' is not null or undefined
            assertParamExists('nftsControllerFindOne', 'chainId', chainId)
            // verify required parameter 'address' is not null or undefined
            assertParamExists('nftsControllerFindOne', 'address', address)
            // verify required parameter 'tokenId' is not null or undefined
            assertParamExists('nftsControllerFindOne', 'tokenId', tokenId)
            const localVarPath = `/nfts/{chainId}/{address}/{tokenId}`
                .replace(`{${"chainId"}}`, encodeURIComponent(String(chainId)))
                .replace(`{${"address"}}`, encodeURIComponent(String(address)))
                .replace(`{${"tokenId"}}`, encodeURIComponent(String(tokenId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} address 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nftsControllerFindUserNft: async (address: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('nftsControllerFindUserNft', 'address', address)
            const localVarPath = `/nfts/users/{address}`
                .replace(`{${"address"}}`, encodeURIComponent(String(address)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nftsControllerForceFetch: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/nfts/fetch-new-tokens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PatchNFTRequestBodyDto} patchNFTRequestBodyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nftsControllerUpdateNFT: async (patchNFTRequestBodyDto: PatchNFTRequestBodyDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'patchNFTRequestBodyDto' is not null or undefined
            assertParamExists('nftsControllerUpdateNFT', 'patchNFTRequestBodyDto', patchNFTRequestBodyDto)
            const localVarPath = `/nfts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchNFTRequestBodyDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NFTsApi - functional programming interface
 * @export
 */
export const NFTsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NFTsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {PostNFTRequestBodyDto} postNFTRequestBodyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async nftsControllerCreate(postNFTRequestBodyDto: PostNFTRequestBodyDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NFTResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.nftsControllerCreate(postNFTRequestBodyDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} chainId 
         * @param {string} address 
         * @param {number} tokenId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async nftsControllerFindOne(chainId: number, address: string, tokenId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NFTResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.nftsControllerFindOne(chainId, address, tokenId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} address 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async nftsControllerFindUserNft(address: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserNFTResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.nftsControllerFindUserNft(address, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async nftsControllerForceFetch(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.nftsControllerForceFetch(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PatchNFTRequestBodyDto} patchNFTRequestBodyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async nftsControllerUpdateNFT(patchNFTRequestBodyDto: PatchNFTRequestBodyDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NFTResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.nftsControllerUpdateNFT(patchNFTRequestBodyDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NFTsApi - factory interface
 * @export
 */
export const NFTsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NFTsApiFp(configuration)
    return {
        /**
         * 
         * @param {PostNFTRequestBodyDto} postNFTRequestBodyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nftsControllerCreate(postNFTRequestBodyDto: PostNFTRequestBodyDto, options?: any): AxiosPromise<NFTResponse> {
            return localVarFp.nftsControllerCreate(postNFTRequestBodyDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} chainId 
         * @param {string} address 
         * @param {number} tokenId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nftsControllerFindOne(chainId: number, address: string, tokenId: number, options?: any): AxiosPromise<NFTResponse> {
            return localVarFp.nftsControllerFindOne(chainId, address, tokenId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} address 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nftsControllerFindUserNft(address: string, options?: any): AxiosPromise<Array<UserNFTResponse>> {
            return localVarFp.nftsControllerFindUserNft(address, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nftsControllerForceFetch(options?: any): AxiosPromise<void> {
            return localVarFp.nftsControllerForceFetch(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PatchNFTRequestBodyDto} patchNFTRequestBodyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nftsControllerUpdateNFT(patchNFTRequestBodyDto: PatchNFTRequestBodyDto, options?: any): AxiosPromise<NFTResponse> {
            return localVarFp.nftsControllerUpdateNFT(patchNFTRequestBodyDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NFTsApi - object-oriented interface
 * @export
 * @class NFTsApi
 * @extends {BaseAPI}
 */
export class NFTsApi extends BaseAPI {
    /**
     * 
     * @param {PostNFTRequestBodyDto} postNFTRequestBodyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NFTsApi
     */
    public nftsControllerCreate(postNFTRequestBodyDto: PostNFTRequestBodyDto, options?: AxiosRequestConfig) {
        return NFTsApiFp(this.configuration).nftsControllerCreate(postNFTRequestBodyDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} chainId 
     * @param {string} address 
     * @param {number} tokenId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NFTsApi
     */
    public nftsControllerFindOne(chainId: number, address: string, tokenId: number, options?: AxiosRequestConfig) {
        return NFTsApiFp(this.configuration).nftsControllerFindOne(chainId, address, tokenId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} address 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NFTsApi
     */
    public nftsControllerFindUserNft(address: string, options?: AxiosRequestConfig) {
        return NFTsApiFp(this.configuration).nftsControllerFindUserNft(address, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NFTsApi
     */
    public nftsControllerForceFetch(options?: AxiosRequestConfig) {
        return NFTsApiFp(this.configuration).nftsControllerForceFetch(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PatchNFTRequestBodyDto} patchNFTRequestBodyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NFTsApi
     */
    public nftsControllerUpdateNFT(patchNFTRequestBodyDto: PatchNFTRequestBodyDto, options?: AxiosRequestConfig) {
        return NFTsApiFp(this.configuration).nftsControllerUpdateNFT(patchNFTRequestBodyDto, options).then((request) => request(this.axios, this.basePath));
    }
}
