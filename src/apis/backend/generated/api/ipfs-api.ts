/* tslint:disable */
/* eslint-disable */
/**
 * Aether Backend
 * The following is a list of endpoints for Aether Backend, plus their respective request and response data transfer objects.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Attribute } from '../models';
/**
 * IpfsApi - axios parameter creator
 * @export
 */
export const IpfsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {object} file 
         * @param {string} name 
         * @param {string} description 
         * @param {Array<Attribute>} attributes 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipfsControllerCreate: async (file: object, name: string, description: string, attributes: Array<Attribute>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('ipfsControllerCreate', 'file', file)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('ipfsControllerCreate', 'name', name)
            // verify required parameter 'description' is not null or undefined
            assertParamExists('ipfsControllerCreate', 'description', description)
            // verify required parameter 'attributes' is not null or undefined
            assertParamExists('ipfsControllerCreate', 'attributes', attributes)
            const localVarPath = `/ipfs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', new Blob([JSON.stringify(file)], { type: "application/json", }));
            }
    
            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }
                if (attributes) {
                localVarFormParams.append('attributes', attributes.join(COLLECTION_FORMATS.csv));
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IpfsApi - functional programming interface
 * @export
 */
export const IpfsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IpfsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {object} file 
         * @param {string} name 
         * @param {string} description 
         * @param {Array<Attribute>} attributes 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipfsControllerCreate(file: object, name: string, description: string, attributes: Array<Attribute>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ipfsControllerCreate(file, name, description, attributes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IpfsApi - factory interface
 * @export
 */
export const IpfsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IpfsApiFp(configuration)
    return {
        /**
         * 
         * @param {object} file 
         * @param {string} name 
         * @param {string} description 
         * @param {Array<Attribute>} attributes 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipfsControllerCreate(file: object, name: string, description: string, attributes: Array<Attribute>, options?: any): AxiosPromise<void> {
            return localVarFp.ipfsControllerCreate(file, name, description, attributes, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IpfsApi - object-oriented interface
 * @export
 * @class IpfsApi
 * @extends {BaseAPI}
 */
export class IpfsApi extends BaseAPI {
    /**
     * 
     * @param {object} file 
     * @param {string} name 
     * @param {string} description 
     * @param {Array<Attribute>} attributes 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IpfsApi
     */
    public ipfsControllerCreate(file: object, name: string, description: string, attributes: Array<Attribute>, options?: AxiosRequestConfig) {
        return IpfsApiFp(this.configuration).ipfsControllerCreate(file, name, description, attributes, options).then((request) => request(this.axios, this.basePath));
    }
}
